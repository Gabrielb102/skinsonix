{"version":3,"file":"main.js","sources":["../../src/electron/main/config.js","../../src/db/config.js","../../src/db/models/treatment.js","../../src/db/models/treatment-phase.js","../../src/electron/main/treatment-handlers.js","../../src/electron/main/serialport-handlers.js","../../src/main.js"],"sourcesContent":["import {app, BrowserWindow} from 'electron';\nimport path from 'path';\nimport started from 'electron-squirrel-startup';\n\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nprocess.env.DIST = path.join(__dirname, '../../dist')\n\nconst initElectronApp = () => {\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\n    if (started) {\n        app.quit();\n    }\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\n    app.on('ready', createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\n    app.on('window-all-closed', () => {\n        if (process.platform !== 'darwin') {\n            app.quit();\n        }\n    });\n\n    app.on('activate', () => {\n        // On OS X it's common to re-create a window in the app when the\n        // dock icon is clicked and there are no other windows open.\n        if (BrowserWindow.getAllWindows().length === 0) {\n            createWindow();\n        }\n    });\n}\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n\nconst createWindow = () => {\n    // Create the browser window.\n    const mainWindow = new BrowserWindow({\n        width: 1920,\n        height: 1280,\n        webPreferences: {\n            preload: path.join(__dirname, '../preload/preload.mjs'),\n        },\n    });\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools();\n\n    if (process.env.NODE_ENV === 'development') {\n        mainWindow.loadURL('http://localhost:5173');\n    } else {\n        // In production, load the built file\n        mainWindow.loadFile(path.join(process.env.DIST, '../renderer/index.html'));\n    }\n};\n\nexport default initElectronApp;","// src/db/sequelize.js\nimport { Sequelize } from 'sequelize';\n\nconst sequelize = new Sequelize({\n  dialect: 'sqlite',\n  storage: './src/db/skinsonix.db',\n  logging: false\n});\n\nexport default sequelize;","// src/db/models/Treatment.js\nimport { DataTypes } from 'sequelize';\nimport sequelize from '../config.js';\n\nconst Treatment = sequelize.define('Treatment', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  description: {\n    type: DataTypes.TEXT,\n    allowNull: true\n  }\n}, {\n  tableName: 'treatments',\n  timestamps: false\n});\n\nTreatment.sync();\n\nexport default Treatment;","// src/db/models/TreatmentPhase.js\nimport { DataTypes } from 'sequelize';\nimport sequelize from '../config.js';\nimport Treatment from './treatment.js';\n\nconst TreatmentPhase = sequelize.define('TreatmentPhase', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  treatment_id: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    references: {\n      model: 'Treatment',\n      key: 'id'\n    }\n  },\n  area: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  duration: {\n    type: DataTypes.INTEGER,\n    defaultValue: 20\n  },\n  red_start_intensity: {\n    type: DataTypes.INTEGER,\n    defaultValue: 100\n  },\n  blue_start_intensity: {\n    type: DataTypes.INTEGER,\n    defaultValue: 100\n  },\n  red_end_intensity: {\n    type: DataTypes.INTEGER,\n    defaultValue: 100\n  },\n  blue_end_intensity: {\n    type: DataTypes.INTEGER,\n    defaultValue: 100\n  },\n  start_frequency: {\n    type: DataTypes.INTEGER,\n    defaultValue: 660\n  },\n  end_frequency: {\n    type: DataTypes.INTEGER,\n    defaultValue: 660\n  },\n  phase_order: {\n    type: DataTypes.INTEGER,\n    allowNull: false\n  }\n}, {\n  tableName: 'treatment_phases',\n  timestamps: false\n});\n\nTreatment.hasMany(TreatmentPhase, {\n  foreignKey: 'treatment_id'\n});\nTreatmentPhase.belongsTo(Treatment, {\n  foreignKey: 'treatment_id'\n});\n\nTreatmentPhase.sync();\n\nexport default TreatmentPhase;","import {ipcMain} from 'electron';\nimport Treatment from '../../db/models/treatment.js';\nimport TreatmentPhase from '../../db/models/treatment-phase.js';\n\nconst initTreatmentsHandlers = () => {\n  ipcMain.handle('treatments-create', async (event, {name, description, phases}) => {\n    const treatment = await Treatment.create({name, description});\n    for (const phase of phases) {\n      await TreatmentPhase.create({...phase, TreatmentId: treatment.id});\n    }\n    return treatment;\n  });\n\n  ipcMain.handle('treatments-get', async (event, params) => {\n    const options = {\n      include: [{\n        model: TreatmentPhase\n      }],\n      nest: true\n    };\n    if (params) {\n      options['where'] = params;\n    }\n    const treatments = await Treatment.findAll(options);\n    if (params?.id) {\n      return treatments[0]?.toJSON() ?? null;\n    }\n    return treatments.map(t => t.toJSON());\n  });\n\n  ipcMain.handle('treatments-update', async (event, {id, name, description, phases}) => {\n    await Treatment.update({name, description}, {where: {id}});\n    await TreatmentPhase.destroy({where: {TreatmentId: id}});\n\n    const existingPhases = await TreatmentPhase.findAll({where: {TreatmentId: id}});\n    const existingPhaseIds = existingPhases.map(p => p.id);\n    const newPhaseIds = phases.map(p => p.id).filter(id => id);\n\n    for (const phase of phases) {\n      if (phase.id) {\n        await TreatmentPhase.update(phase, {where: {id: phase.id}});\n      } else {\n        await TreatmentPhase.create({...phase, TreatmentId: id});\n      }\n    }\n\n    const phasesToDelete = existingPhaseIds.filter(id => !newPhaseIds.includes(id));\n    if (phasesToDelete.length) {\n      await TreatmentPhase.destroy({where: {id: phasesToDelete}});\n    }\n  });\n\n  ipcMain.handle('treatments-delete', async (event, id) => {\n    await TreatmentPhase.destroy({where: {TreatmentId: id}});\n    await Treatment.destroy({where: {id}});\n  });\n}\n\nexport default initTreatmentsHandlers;","import {ipcMain} from 'electron';\nimport {SerialPort} from 'serialport';\n\nclass SerialPortManager {\n    wandPort = null;\n\n    async listPorts() {\n        return SerialPort.list();\n    }\n\n    async openPort() { if (this.wandPort?.isOpen) { return { success: true, path: this.wandPort.path, baudRate: this.wandPort.baudRate, isOpen: this.wandPort.isOpen }; }\n        try {\n            const ports = await SerialPort.list();\n            // const wandPort = ports.find(port => port.path === \"COM3\"); // for Windows\n            const wandPort = ports.find(port => port.path === \"/dev/tty.usbmodem00071748741\"); // for Mac\n\n            if (!wandPort) {\n                throw new Error(\"COM3 port not found\");\n            }\n\n            this.wandPort = new SerialPort({ path: wandPort.path, baudRate: 9600 });\n\n            return new Promise((resolve, reject) => {\n                this.wandPort.on('open', () => {\n                    resolve({\n                        success: true,\n                        path: this.wandPort.path,\n                        baudRate: this.wandPort.baudRate,\n                        isOpen: this.wandPort.isOpen\n                    });\n                });\n\n                this.wandPort.on('error', (err) => {\n                    reject(Error({\n                        success: false,\n                        error: {\n                            message: err.message,\n                            code: err.code,\n                            stack: err.stack\n                        }\n                    }));\n                });\n            });\n        } catch (err) {\n            throw Error({\n                success: false,\n                error: {\n                    message: err.message,\n                    code: err.code,\n                    stack: err.stack\n                }\n            });\n        }\n    }\n\n    async writeWandPort(data) {\n        if (this.wandPort) {\n            this.wandPort.write(data);\n            return {\n                success: true,\n                data: data\n            };\n        } else {\n            console.error(\"Wand port not open\");\n            return Error(\"Wand port not open\");\n        }\n    }\n}\n\nconst serialPortManager = new SerialPortManager();\n\nconst initSerialportHandlers = () => {\n    ipcMain.handle('list-ports', () => serialPortManager.listPorts());\n    ipcMain.handle('open-port', () => serialPortManager.openPort());\n    ipcMain.handle('write', (event, data) => serialPortManager.writeWandPort(data));\n}\n\nexport default initSerialportHandlers;","import initElectronApp from \"./electron/main/config.js\";\nimport initTreatmentsHandlers from \"./electron/main/treatment-handlers.js\";\nimport initSerialportHandlers from \"./electron/main/serialport-handlers.js\";\n\ninitElectronApp();\ninitTreatmentsHandlers();\ninitSerialportHandlers()\n\n\n"],"names":["id"],"mappings":"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"}