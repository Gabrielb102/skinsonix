{"version":3,"file":"main.js","sources":["../../src/db/DBManager.js","../../src/electron/main/config.js","../../src/electron/main/treatmentHandlers.js","../../src/electron/main/serialportHandlers.js","../../src/main.js"],"sourcesContent":["import sqlite3 from 'sqlite3';\r\n\r\nclass DBManager {\r\n\r\n  static init() {\r\n    const db = new sqlite3.Database('./src/db/skinsonix.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {\r\n      if (err) {\r\n        console.log(\"Error opening / creating database\");\r\n        if (err.message) {\r\n          console.error(err.message);\r\n        }\r\n      } else {\r\n        console.log('Connected to the skinsonix database.');\r\n        this.createTables(db);\r\n        this.checkDefaultData(db, (exists) => {\r\n          if (!exists) {\r\n            console.log(\"Inserting default data\");\r\n            this.insertDefaultData(db);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return db;\r\n  }\r\n\r\n  static createTables(db) {\r\n    db.exec(`\r\n        CREATE TABLE IF NOT EXISTS treatments\r\n        (\r\n            id\r\n            INTEGER\r\n            PRIMARY\r\n            KEY\r\n            AUTOINCREMENT,\r\n            name\r\n            TEXT\r\n            NOT\r\n            NULL,\r\n            description\r\n            TEXT\r\n            NULL\r\n        );\r\n\r\n        CREATE TABLE IF NOT EXISTS treatment_phases\r\n        (\r\n            id\r\n            INTEGER\r\n            PRIMARY\r\n            KEY\r\n            AUTOINCREMENT,\r\n            treatment_id\r\n            INTEGER\r\n            NOT\r\n            NULL,\r\n            area\r\n            TEXT\r\n            NOT\r\n            NULL,\r\n            duration\r\n            INTEGER\r\n            DEFAULT\r\n            20,\r\n            red_intensity\r\n            INTEGER\r\n            DEFAULT\r\n            100,\r\n            blue_intensity\r\n            INTEGER\r\n            DEFAULT\r\n            100,\r\n            volume\r\n            INTEGER\r\n            DEFAULT\r\n            50,\r\n            treatment_pattern\r\n            TEXT\r\n            DEFAULT\r\n            'sine_increasing',\r\n            phase_order\r\n            INTEGER\r\n            NOT\r\n            NULL,\r\n            FOREIGN\r\n            KEY\r\n        (\r\n            treatment_id\r\n        ) REFERENCES treatments\r\n        (\r\n            id\r\n        )\r\n            );\r\n    `, (err) => {\r\n      if (err) {\r\n        console.error(\"Error creating tables:\", err.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  static insertDefaultData(db) {\r\n    db.exec(`\r\n        INSERT INTO treatments (id, name, description)\r\n        VALUES (1, 'SkinSonix Facial',\r\n                'The original SkinSonix treatment, a relaxing combination of low frequency waves and LED light exposure. A great starting point for those new to low frequency and LED treatments, and a timeless option for experienced individuals.');\r\n\r\n        INSERT INTO treatment_phases (treatment_id, area, phase_order)\r\n        VALUES (1, 'up_right_side', 1),\r\n               (1, 'forehead', 2),\r\n               (1, 'up_left_side', 3),\r\n               (1, 'left_jaw', 4),\r\n               (1, 'chin', 5),\r\n               (1, 'right_jaw', 6),\r\n               (1, 'up_lip', 7),\r\n               (1, 'nose', 8),\r\n               (1, 'left_neck', 9),\r\n               (1, 'right_neck', 10);\r\n    `, (err) => {\r\n      if (err) {\r\n        console.error(\"Error inserting default data:\", err.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  static checkDefaultData(db, callback) {\r\n    db.get(\"SELECT * FROM treatments\", (err, row) => {\r\n      if (err) {\r\n        console.error(err.message);\r\n        callback(false);\r\n      } else {\r\n        callback(!!row);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DBManager;","import {app, BrowserWindow} from 'electron';\r\nimport path from 'path';\r\nimport started from 'electron-squirrel-startup';\r\nimport DBManager from \"../../db/DBManager\";\r\n\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname } from 'path';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nprocess.env.DIST = path.join(__dirname, '../../dist')\r\n\r\nconst initElectronApp = () => {\r\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\r\n    if (started) {\r\n        app.quit();\r\n    }\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\n    app.on('ready', createWindow);\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\n    app.on('window-all-closed', () => {\r\n        if (process.platform !== 'darwin') {\r\n            app.quit();\r\n        }\r\n    });\r\n\r\n    app.on('activate', () => {\r\n        // On OS X it's common to re-create a window in the app when the\r\n        // dock icon is clicked and there are no other windows open.\r\n        if (BrowserWindow.getAllWindows().length === 0) {\r\n            createWindow();\r\n        }\r\n    });\r\n\r\n    DBManager.init();\r\n}\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and import them here.\r\n\r\nconst createWindow = () => {\r\n    // Create the browser window.\r\n    const mainWindow = new BrowserWindow({\r\n        width: 800,\r\n        height: 600,\r\n        webPreferences: {\r\n            preload: path.join(__dirname, '../preload/preload.mjs'),\r\n        },\r\n    });\r\n\r\n    // Open the DevTools.\r\n    // mainWindow.webContents.openDevTools();\r\n\r\n    if (process.env.NODE_ENV === 'development') {\r\n        mainWindow.loadURL('http://localhost:5173');\r\n    } else {\r\n        // In production, load the built file\r\n        mainWindow.loadFile(path.join(process.env.DIST, '../renderer/index.html'));\r\n    }\r\n};\r\n\r\nexport default initElectronApp;","import {ipcMain} from 'electron';\r\nimport DBManager from \"../../db/DBManager\";\r\n\r\nconst db = DBManager.init();\r\n\r\nconst initTreatmentsHandlers = () => {\r\n    ipcMain.handle('treatments-create', async () => {\r\n        return DBManager.init();\r\n    });\r\n    ipcMain.handle('treatments-read', async () => {\r\n        return DBManager.init();\r\n    });\r\n    ipcMain.handle('treatments-update', async () => {\r\n        return DBManager.init();\r\n    });\r\n    ipcMain.handle('treatments-delete', async () => {\r\n        return DBManager.init();\r\n    });\r\n}\r\n\r\nexport default initTreatmentsHandlers;\r\n","import {ipcMain} from 'electron';\r\nimport {SerialPort} from 'serialport';\r\n\r\nclass SerialPortManager {\r\n    wandPort = null;\r\n\r\n    async listPorts() {\r\n        return SerialPort.list();\r\n    }\r\n\r\n    async openPort() {\r\n            if (!this.wandPort) {\r\n                this.wandPort = new SerialPort({path: \"COM3\", baudRate: 9600});\r\n            }\r\n        return await new Promise((resolve, reject) => {\r\n                this.wandPort.on('open', () => {\r\n                    resolve({\r\n                        success: true,\r\n                        path: this.wandPort.path,\r\n                        baudRate: this.wandPort.baudRate,\r\n                        isOpen: this.wandPort.isOpen\r\n                    });\r\n                });\r\n\r\n                this.wandPort.on('error', (err) => {\r\n                    console.error(err);\r\n                    reject(Error(err.message));\r\n                });\r\n            });\r\n    }\r\n\r\n    async writeWandPort(data) {\r\n        if (this.wandPort) {\r\n            this.wandPort.write(data);\r\n            return {\r\n                success: true,\r\n                data: data\r\n            };\r\n        } else {\r\n            console.error(\"Wand port not open\");\r\n            return Error(\"Wand port not open\");\r\n        }\r\n    }\r\n}\r\n\r\nconst serialPortManager = new SerialPortManager();\r\n\r\nconst initSerialportHandlers = () => {\r\n    ipcMain.handle('list-ports', () => serialPortManager.listPorts());\r\n    ipcMain.handle('open-port', () => serialPortManager.openPort());\r\n    ipcMain.handle('write', (event, data) => serialPortManager.writeWandPort(data));\r\n}\r\n\r\nexport default initSerialportHandlers;","import initElectronApp from \"./electron/main/config.js\";\r\nimport initTreatmentsHandlers from \"./electron/main/treatmentHandlers.js\";\r\nimport initSerialportHandlers from \"./electron/main/serialportHandlers.js\";\r\n\r\ninitElectronApp();\r\ninitTreatmentsHandlers();\r\ninitSerialportHandlers()\r\n\r\n\r\n"],"names":[],"mappings":"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"}