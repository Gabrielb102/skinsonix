{"version":3,"file":"main.js","sources":["../../src/db/DBManager.js","../../src/electron/main/config.js","../../src/electron/main/treatmentHandlers.js","../../src/electron/main/serialportHandlers.js","../../src/main.js"],"sourcesContent":["import sqlite3 from 'sqlite3';\n\nclass DBManager {\n\n  static init() {\n    const db = new sqlite3.Database('./src/db/skinsonix.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {\n      if (err) {\n        console.log(\"Error opening / creating database\");\n        if (err.message) {\n          console.error(err.message);\n        }\n      } else {\n        console.log('Connected to the skinsonix database.');\n        this.createTables(db);\n        this.checkDefaultData(db, (exists) => {\n          if (!exists) {\n            console.log(\"Inserting default data\");\n            this.insertDefaultData(db);\n          }\n        });\n      }\n    });\n    return db;\n  }\n\n  static createTables(db) {\n    db.exec(`\n        CREATE TABLE IF NOT EXISTS treatments\n        (\n            id\n            INTEGER\n            PRIMARY\n            KEY\n            AUTOINCREMENT,\n            name\n            TEXT\n            NOT\n            NULL,\n            description\n            TEXT\n            NULL\n        );\n\n        CREATE TABLE IF NOT EXISTS treatment_phases\n        (\n            id\n            INTEGER\n            PRIMARY\n            KEY\n            AUTOINCREMENT,\n            treatment_id\n            INTEGER\n            NOT\n            NULL,\n            area\n            TEXT\n            NOT\n            NULL,\n            duration\n            INTEGER\n            DEFAULT\n            20,\n            red_intensity\n            INTEGER\n            DEFAULT\n            100,\n            blue_intensity\n            INTEGER\n            DEFAULT\n            100,\n            volume\n            INTEGER\n            DEFAULT\n            50,\n            treatment_pattern\n            TEXT\n            DEFAULT\n            'sine_increasing',\n            phase_order\n            INTEGER\n            NOT\n            NULL,\n            FOREIGN\n            KEY\n        (\n            treatment_id\n        ) REFERENCES treatments\n        (\n            id\n        )\n            );\n    `, (err) => {\n      if (err) {\n        console.error(\"Error creating tables:\", err.message);\n      }\n    });\n  }\n\n  static insertDefaultData(db) {\n    db.exec(`\n        INSERT INTO treatments (id, name, description)\n        VALUES (1, 'SkinSonix Facial',\n                'The original SkinSonix treatment, a relaxing combination of low frequency waves and LED light exposure. A great starting point for those new to low frequency and LED treatments, and a timeless option for experienced individuals.');\n\n        INSERT INTO treatment_phases (treatment_id, area, phase_order)\n        VALUES (1, 'up_right_side', 1),\n               (1, 'forehead', 2),\n               (1, 'up_left_side', 3),\n               (1, 'left_jaw', 4),\n               (1, 'chin', 5),\n               (1, 'right_jaw', 6),\n               (1, 'up_lip', 7),\n               (1, 'nose', 8),\n               (1, 'left_neck', 9),\n               (1, 'right_neck', 10);\n    `, (err) => {\n      if (err) {\n        console.error(\"Error inserting default data:\", err.message);\n      }\n    });\n  }\n\n  static checkDefaultData(db, callback) {\n    db.get(\"SELECT * FROM treatments\", (err, row) => {\n      if (err) {\n        console.error(err.message);\n        callback(false);\n      } else {\n        callback(!!row);\n      }\n    });\n  }\n}\n\nexport default DBManager;","import {app, BrowserWindow} from 'electron';\nimport path from 'path';\nimport started from 'electron-squirrel-startup';\nimport DBManager from \"../../db/DBManager\";\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nprocess.env.DIST = path.join(__dirname, '../../dist')\n\nconst initElectronApp = () => {\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\n    if (started) {\n        app.quit();\n    }\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\n    app.on('ready', createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\n    app.on('window-all-closed', () => {\n        if (process.platform !== 'darwin') {\n            app.quit();\n        }\n    });\n\n    app.on('activate', () => {\n        // On OS X it's common to re-create a window in the app when the\n        // dock icon is clicked and there are no other windows open.\n        if (BrowserWindow.getAllWindows().length === 0) {\n            createWindow();\n        }\n    });\n\n    DBManager.init();\n}\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n\nconst createWindow = () => {\n    // Create the browser window.\n    const mainWindow = new BrowserWindow({\n        width: 1920,\n        height: 1280,\n        webPreferences: {\n            preload: path.join(__dirname, '../preload/preload.mjs'),\n        },\n    });\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools();\n\n    if (process.env.NODE_ENV === 'development') {\n        mainWindow.loadURL('http://localhost:5173');\n    } else {\n        // In production, load the built file\n        mainWindow.loadFile(path.join(process.env.DIST, '../renderer/index.html'));\n    }\n};\n\nexport default initElectronApp;","import {ipcMain} from 'electron';\nimport DBManager from \"../../db/DBManager\";\n\nconst db = DBManager.init();\n\nconst initTreatmentsHandlers = () => {\n    ipcMain.handle('treatments-create', async () => {\n        return DBManager.init();\n    });\n    ipcMain.handle('treatments-read', async () => {\n        return DBManager.init();\n    });\n    ipcMain.handle('treatments-update', async () => {\n        return DBManager.init();\n    });\n    ipcMain.handle('treatments-delete', async () => {\n        return DBManager.init();\n    });\n}\n\nexport default initTreatmentsHandlers;\n","import {ipcMain} from 'electron';\nimport {SerialPort} from 'serialport';\n\nclass SerialPortManager {\n    wandPort = null;\n\n    async listPorts() {\n        return SerialPort.list();\n    }\n\n    async openPort() {\n            if (!this.wandPort) {\n                this.wandPort = new SerialPort({path: \"COM3\", baudRate: 9600});\n            }\n        return await new Promise((resolve, reject) => {\n                this.wandPort.on('open', () => {\n                    resolve({\n                        success: true,\n                        path: this.wandPort.path,\n                        baudRate: this.wandPort.baudRate,\n                        isOpen: this.wandPort.isOpen\n                    });\n                });\n\n                this.wandPort.on('error', (err) => {\n                    console.error(err);\n                    reject(Error(err.message));\n                });\n            });\n    }\n\n    async writeWandPort(data) {\n        if (this.wandPort) {\n            this.wandPort.write(data);\n            return {\n                success: true,\n                data: data\n            };\n        } else {\n            console.error(\"Wand port not open\");\n            return Error(\"Wand port not open\");\n        }\n    }\n}\n\nconst serialPortManager = new SerialPortManager();\n\nconst initSerialportHandlers = () => {\n    ipcMain.handle('list-ports', () => serialPortManager.listPorts());\n    ipcMain.handle('open-port', () => serialPortManager.openPort());\n    ipcMain.handle('write', (event, data) => serialPortManager.writeWandPort(data));\n}\n\nexport default initSerialportHandlers;","import initElectronApp from \"./electron/main/config.js\";\nimport initTreatmentsHandlers from \"./electron/main/treatmentHandlers.js\";\nimport initSerialportHandlers from \"./electron/main/serialportHandlers.js\";\n\ninitElectronApp();\ninitTreatmentsHandlers();\ninitSerialportHandlers()\n\n\n"],"names":[],"mappings":"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"}