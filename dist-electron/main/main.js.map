{"version":3,"file":"main.js","sources":["../../src/electron/main/config.js","../../src/db/config.js","../../src/db/models/treatment.js","../../src/db/models/treatment-phase.js","../../src/electron/main/treatment-handlers.js","../../src/electron/main/serialport-handlers.js","../../src/main.js"],"sourcesContent":["import {app, BrowserWindow} from 'electron';\r\nimport path from 'path';\r\nimport started from 'electron-squirrel-startup';\r\n\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname } from 'path';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nprocess.env.DIST = path.join(__dirname, '../../dist')\r\n\r\nconst initElectronApp = () => {\r\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\r\n    if (started) {\r\n        app.quit();\r\n    }\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\n    app.on('ready', createWindow);\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\n    app.on('window-all-closed', () => {\r\n        if (process.platform !== 'darwin') {\r\n            app.quit();\r\n        }\r\n    });\r\n\r\n    app.on('activate', () => {\r\n        // On OS X it's common to re-create a window in the app when the\r\n        // dock icon is clicked and there are no other windows open.\r\n        if (BrowserWindow.getAllWindows().length === 0) {\r\n            createWindow();\r\n        }\r\n    });\r\n}\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and import them here.\r\n\r\nconst createWindow = () => {\r\n    // Create the browser window.\r\n    const mainWindow = new BrowserWindow({\r\n        width: 1920,\r\n        height: 1280,\r\n        webPreferences: {\r\n            preload: path.join(__dirname, '../preload/preload.mjs'),\r\n        },\r\n    });\r\n\r\n    // Open the DevTools.\r\n    // mainWindow.webContents.openDevTools();\r\n\r\n    if (process.env.NODE_ENV === 'development') {\r\n        mainWindow.loadURL('http://localhost:5173');\r\n    } else {\r\n        // In production, load the built file\r\n        mainWindow.loadFile(path.join(process.env.DIST, '../renderer/index.html'));\r\n    }\r\n};\r\n\r\nexport default initElectronApp;","// src/db/sequelize.js\r\nimport { Sequelize } from 'sequelize';\r\n\r\nconst sequelize = new Sequelize({\r\n  dialect: 'sqlite',\r\n  storage: './src/db/skinsonix.db',\r\n  logging: false\r\n});\r\n\r\nexport default sequelize;","// src/db/models/Treatment.js\r\nimport { DataTypes } from 'sequelize';\r\nimport sequelize from '../config.js';\r\n\r\nconst Treatment = sequelize.define('Treatment', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true\r\n  },\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false\r\n  },\r\n  description: {\r\n    type: DataTypes.TEXT,\r\n    allowNull: true\r\n  }\r\n}, {\r\n  tableName: 'treatments',\r\n  timestamps: false\r\n});\r\n\r\nTreatment.sync();\r\n\r\nexport default Treatment;","// src/db/models/TreatmentPhase.js\r\nimport { DataTypes } from 'sequelize';\r\nimport sequelize from '../config.js';\r\nimport Treatment from './treatment.js';\r\n\r\nconst TreatmentPhase = sequelize.define('TreatmentPhase', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true\r\n  },\r\n  treatment_id: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n    references: {\r\n      model: 'Treatment',\r\n      key: 'id'\r\n    }\r\n  },\r\n  area: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false\r\n  },\r\n  duration: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 20\r\n  },\r\n  red_start_intensity: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 100\r\n  },\r\n  blue_start_intensity: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 100\r\n  },\r\n  red_end_intensity: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 100\r\n  },\r\n  blue_end_intensity: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 100\r\n  },\r\n  start_frequency: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 660\r\n  },\r\n  end_frequency: {\r\n    type: DataTypes.INTEGER,\r\n    defaultValue: 660\r\n  },\r\n  phase_order: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false\r\n  }\r\n}, {\r\n  tableName: 'treatment_phases',\r\n  timestamps: false\r\n});\r\n\r\nTreatment.hasMany(TreatmentPhase, {\r\n  foreignKey: 'treatment_id'\r\n});\r\nTreatmentPhase.belongsTo(Treatment, {\r\n  foreignKey: 'treatment_id'\r\n});\r\n\r\nTreatmentPhase.sync();\r\n\r\nexport default TreatmentPhase;","import {ipcMain} from 'electron';\r\nimport Treatment from '../../db/models/treatment.js';\r\nimport TreatmentPhase from '../../db/models/treatment-phase.js';\r\n\r\nconst initTreatmentsHandlers = () => {\r\n  ipcMain.handle('treatments-create', async (event, {name, description, phases}) => {\r\n    const treatment = await Treatment.create({name, description});\r\n    for (const phase of phases) {\r\n      await TreatmentPhase.create({...phase, TreatmentId: treatment.id});\r\n    }\r\n    return treatment;\r\n  });\r\n\r\n  ipcMain.handle('treatments-get', async (event, params) => {\r\n    const options = {\r\n      include: [{\r\n        model: TreatmentPhase\r\n      }],\r\n      nest: true\r\n    };\r\n    if (params) {\r\n      options['where'] = params;\r\n    }\r\n    const treatments = await Treatment.findAll(options);\r\n    if (params?.id) {\r\n      return treatments[0]?.toJSON() ?? null;\r\n    }\r\n    return treatments.map(t => t.toJSON());\r\n  });\r\n\r\n  ipcMain.handle('treatments-update', async (event, {id, name, description, phases}) => {\r\n    await Treatment.update({name, description}, {where: {id}});\r\n    await TreatmentPhase.destroy({where: {TreatmentId: id}});\r\n\r\n    const existingPhases = await TreatmentPhase.findAll({where: {TreatmentId: id}});\r\n    const existingPhaseIds = existingPhases.map(p => p.id);\r\n    const newPhaseIds = phases.map(p => p.id).filter(id => id);\r\n\r\n    for (const phase of phases) {\r\n      if (phase.id) {\r\n        await TreatmentPhase.update(phase, {where: {id: phase.id}});\r\n      } else {\r\n        await TreatmentPhase.create({...phase, TreatmentId: id});\r\n      }\r\n    }\r\n\r\n    const phasesToDelete = existingPhaseIds.filter(id => !newPhaseIds.includes(id));\r\n    if (phasesToDelete.length) {\r\n      await TreatmentPhase.destroy({where: {id: phasesToDelete}});\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('treatments-delete', async (event, id) => {\r\n    await TreatmentPhase.destroy({where: {TreatmentId: id}});\r\n    await Treatment.destroy({where: {id}});\r\n  });\r\n}\r\n\r\nexport default initTreatmentsHandlers;","import {ipcMain} from 'electron';\r\nimport {SerialPort} from 'serialport';\r\n\r\nclass SerialPortManager {\r\n    wandPort = null;\r\n\r\n    async listPorts() {\r\n        return SerialPort.list();\r\n    }\r\n\r\n    async openPort() { if (this.wandPort && this.wandPort.isOpen) { return { success: true, path: this.wandPort.path, baudRate: this.wandPort.baudRate, isOpen: this.wandPort.isOpen }; }\r\n        try {\r\n            const ports = await SerialPort.list();\r\n            const wandPort = ports.find(port => port.path === \"COM3\");\r\n\r\n            if (!wandPort) {\r\n                throw new Error(\"COM3 port not found\");\r\n            }\r\n\r\n            this.wandPort = new SerialPort({ path: wandPort.path, baudRate: 9600 });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                this.wandPort.on('open', () => {\r\n                    resolve({\r\n                        success: true,\r\n                        path: this.wandPort.path,\r\n                        baudRate: this.wandPort.baudRate,\r\n                        isOpen: this.wandPort.isOpen\r\n                    });\r\n                });\r\n\r\n                this.wandPort.on('error', (err) => {\r\n                    reject({\r\n                        success: false,\r\n                        error: {\r\n                            message: err.message,\r\n                            code: err.code,\r\n                            stack: err.stack\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        } catch (err) {\r\n            throw {\r\n                success: false,\r\n                error: {\r\n                    message: err.message,\r\n                    code: err.code,\r\n                    stack: err.stack\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    async writeWandPort(data) {\r\n        if (this.wandPort) {\r\n            this.wandPort.write(data);\r\n            return {\r\n                success: true,\r\n                data: data\r\n            };\r\n        } else {\r\n            console.error(\"Wand port not open\");\r\n            return Error(\"Wand port not open\");\r\n        }\r\n    }\r\n}\r\n\r\nconst serialPortManager = new SerialPortManager();\r\n\r\nconst initSerialportHandlers = () => {\r\n    ipcMain.handle('list-ports', () => serialPortManager.listPorts());\r\n    ipcMain.handle('open-port', () => serialPortManager.openPort());\r\n    ipcMain.handle('write', (event, data) => serialPortManager.writeWandPort(data));\r\n}\r\n\r\nexport default initSerialportHandlers;","import initElectronApp from \"./electron/main/config.js\";\r\nimport initTreatmentsHandlers from \"./electron/main/treatment-handlers.js\";\r\nimport initSerialportHandlers from \"./electron/main/serialport-handlers.js\";\r\n\r\ninitElectronApp();\r\ninitTreatmentsHandlers();\r\ninitSerialportHandlers()\r\n\r\n\r\n"],"names":["id"],"mappings":"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"}